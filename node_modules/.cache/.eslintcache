[{"/Users/jojuseon/emotion-diary/src/index.js":"1","/Users/jojuseon/emotion-diary/src/App.js":"2","/Users/jojuseon/emotion-diary/src/pages/Diary.js":"3","/Users/jojuseon/emotion-diary/src/pages/Home.js":"4","/Users/jojuseon/emotion-diary/src/pages/New.js":"5","/Users/jojuseon/emotion-diary/src/pages/Edit.js":"6","/Users/jojuseon/emotion-diary/src/components/MyButton.js":"7","/Users/jojuseon/emotion-diary/src/components/MyHeader.js":"8","/Users/jojuseon/emotion-diary/src/modules/index.js":"9","/Users/jojuseon/emotion-diary/src/modules/write.js":"10","/Users/jojuseon/emotion-diary/src/components/DiaryList.js":"11","/Users/jojuseon/emotion-diary/src/components/DiaryItem.js":"12","/Users/jojuseon/emotion-diary/src/components/DiaryEditor.js":"13","/Users/jojuseon/emotion-diary/src/components/EmotionItem.js":"14"},{"size":692,"mtime":1653497983375,"results":"15","hashOfConfig":"16"},{"size":720,"mtime":1654146625824,"results":"17","hashOfConfig":"16"},{"size":1100,"mtime":1654151424421,"results":"18","hashOfConfig":"16"},{"size":1485,"mtime":1654245194027,"results":"19","hashOfConfig":"16"},{"size":215,"mtime":1654079934753,"results":"20","hashOfConfig":"16"},{"size":4093,"mtime":1654520768716,"results":"21","hashOfConfig":"16"},{"size":303,"mtime":1653318878163,"results":"22","hashOfConfig":"16"},{"size":352,"mtime":1653320337447,"results":"23","hashOfConfig":"16"},{"size":153,"mtime":1653326585651,"results":"24","hashOfConfig":"16"},{"size":1374,"mtime":1654576954121,"results":"25","hashOfConfig":"16"},{"size":772,"mtime":1653892709649,"results":"26","hashOfConfig":"16"},{"size":1069,"mtime":1654151248975,"results":"27","hashOfConfig":"16"},{"size":3826,"mtime":1654168485697,"results":"28","hashOfConfig":"16"},{"size":442,"mtime":1654016332951,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"rha4x8",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},"/Users/jojuseon/emotion-diary/src/index.js",[],[],[],"/Users/jojuseon/emotion-diary/src/App.js",["88"],[],"import \"./App.css\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Edit from \"./pages/Edit\";\nimport Diary from \"./pages/Diary\";\nimport New from \"./pages/New\";\nimport { useReducer } from \"react\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/edit/:id\" element={<Edit />} />\n\n                    <Route path=\"/diary/:id\" element={<Diary />} />\n                    <Route path=\"/new\" element={<New />} />\n                </Routes>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n",[],"/Users/jojuseon/emotion-diary/src/pages/Diary.js",["89"],[],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport MyButton from \"../components/MyButton\";\nimport MyHeader from \"../components/MyHeader\";\n\nconst Diary = () => {\n    const navigate = useNavigate();\n    const { id } = useParams();\n    //해당 객체 가져옴\n    const getData = useSelector((it) => it.write.writeList[id]);\n\n    const goEdit = () => {\n        navigate(`/edit/${getData.id}`);\n    };\n    return (\n        <div className=\"Diary\">\n            <MyHeader headText={`그 날의 기록`} leftChild={<MyButton onClick={() => navigate(-1)} text={\"뒤로가기\"} />} rightChild={<MyButton onClick={goEdit} text={\"수정하기\"} />} />\n            <section>\n                <h4>그 날의 감정</h4>\n                <img src={process.env.PUBLIC_URL + `assets/emotion5.png`} />\n            </section>\n            <section>\n                <h4>그 날의 일기</h4>\n                <div className=\"getDataContent\">{getData.content}</div>\n            </section>\n        </div>\n    );\n};\n\nexport default Diary;\n","/Users/jojuseon/emotion-diary/src/pages/Home.js",["90"],[],"import React, { useContext, useEffect, useState } from \"react\";\nimport MyHeader from \"./../components/MyHeader\";\nimport MyButton from \"./../components/MyButton\";\nimport { useSelector } from \"react-redux\";\nimport DiaryList from \"../components/DiaryList\";\nconst Home = () => {\n    const dummyList = useSelector((it) => it.write.writeList);\n    const [renderDate, setRenderDate] = useState(new Date());\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const firstDay = new Date(renderDate.getFullYear(), renderDate.getMonth(), 1);\n        const lastDay = new Date(renderDate.getFullYear(), renderDate.getMonth() + 1, 0);\n\n        setData(dummyList.filter((it) => firstDay <= it.date && it.date <= lastDay));\n    }, [dummyList, renderDate]);\n\n    const increaseMonth = () => {\n        setRenderDate(new Date(renderDate.getFullYear(), renderDate.getMonth() + 1, renderDate.getDate()));\n    };\n\n    const decreaseMonth = () => {\n        setRenderDate(new Date(renderDate.getFullYear(), renderDate.getMonth() - 1, renderDate.getDate()));\n    };\n    console.log(data);\n\n    return (\n        <div>\n            <MyHeader\n                headText={`${renderDate.getFullYear()}년 ${renderDate.getMonth() + 1}월`}\n                leftChild={<MyButton text={`<`} onClick={decreaseMonth} />}\n                rightChild={<MyButton text={`>`} onClick={increaseMonth} />}\n            />\n            <DiaryList diaryList={data} />\n        </div>\n    );\n};\n\nexport default Home;\n",[],"/Users/jojuseon/emotion-diary/src/pages/New.js",["91","92"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport DiaryEditor from \"../components/DiaryEditor\";\n\nconst New = () => {\n    return <DiaryEditor />;\n};\n\nexport default New;\n",[],"/Users/jojuseon/emotion-diary/src/pages/Edit.js",["93","94"],[],"/Users/jojuseon/emotion-diary/src/components/MyButton.js",[],[],[],"/Users/jojuseon/emotion-diary/src/components/MyHeader.js",[],[],"/Users/jojuseon/emotion-diary/src/modules/index.js",[],[],[],"/Users/jojuseon/emotion-diary/src/modules/write.js",[],[],"/Users/jojuseon/emotion-diary/src/components/DiaryList.js",["95"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport DiaryItem from \"./DiaryItem\";\nimport MyButton from \"./MyButton\";\n\nconst DiaryList = ({ diaryList }) => {\n    const navigate = useNavigate();\n    return (\n        <div className=\"diaryList\">\n            <div className=\"newDiary\">\n                <MyButton\n                    className=\"gd\"\n                    type={\"positive\"}\n                    text=\"새일기 쓰기\"\n                    onClick={() => {\n                        navigate(\"/new\");\n                    }}\n                />\n            </div>\n\n            {diaryList.map((it) => {\n                return <DiaryItem key={it.id} it={it} />;\n            })}\n        </div>\n    );\n};\n\nexport default DiaryList;\n",[],"/Users/jojuseon/emotion-diary/src/components/DiaryItem.js",["96"],[],"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MyButton from \"./MyButton\";\n\nconst DiaryItem = ({ it }) => {\n    const navigate = useNavigate();\n\n    const strDate = new Date(parseInt(it.date)).toLocaleDateString();\n\n    const goDetail = () => {\n        navigate(`/diary/${it.id}`);\n    };\n\n    const goEdit = () => {\n        navigate(`/edit/${it.id}`);\n    };\n\n    return (\n        <div className=\"DiaryItem\">\n            <div onClick={goDetail} className={[\"emotion_img_wrapper\", `emotion_img_wrapper_${it.emotion}`].join(\" \")}>\n                <img src={process.env.PUBLIC_URL + `assets/emotion${it.emotion}.png`} />\n            </div>\n            <div onClick={goDetail} className=\"info_wrapper\">\n                <div className=\"diary_date\">{strDate}</div>\n                <div className=\"diary_content_preview\">{it.content}</div>\n            </div>\n            <div onClick={goEdit} className=\"btn_wrapper\">\n                <MyButton text={\"수정하기\"} />\n            </div>\n        </div>\n    );\n};\n\nexport default DiaryItem;\n","/Users/jojuseon/emotion-diary/src/components/DiaryEditor.js",["97"],[],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { create } from \"../modules/write\";\nimport EmotionItem from \"./EmotionItem\";\nimport MyButton from \"./MyButton\";\nimport MyHeader from \"./MyHeader\";\n\n// let today = new Date();\n// let year = today.getFullYear();\n// let month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n// let day = (\"0\" + today.getDate()).slice(-2);\n// let dateString = year + \"-\" + month + \"-\" + day;\n\nconst emotionList = [\n    {\n        emotion_id: 1,\n        emotion_img: process.env.PUBLIC_URL + `/assets/emotion1.png`,\n        emotion_descript: \"완전 좋음\",\n    },\n    {\n        emotion_id: 2,\n        emotion_img: process.env.PUBLIC_URL + `/assets/emotion2.png`,\n        emotion_descript: \"좋음\",\n    },\n    {\n        emotion_id: 3,\n        emotion_img: process.env.PUBLIC_URL + `/assets/emotion3.png`,\n        emotion_descript: \"그럭저럭\",\n    },\n    {\n        emotion_id: 4,\n        emotion_img: process.env.PUBLIC_URL + `/assets/emotion4.png`,\n        emotion_descript: \"나쁨\",\n    },\n    {\n        emotion_id: 5,\n        emotion_img: process.env.PUBLIC_URL + `/assets/emotion5.png`,\n        emotion_descript: \"끔찍함\",\n    },\n];\n\nconst DiaryEditor = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const [emotion, setEmotion] = useState(0);\n    const [info, setInfo] = useState({});\n\n    const handleClickEmote = (emotion) => {\n        setEmotion(emotion);\n        setInfo({ ...info, emotion });\n    };\n\n    const onChange = (e) => {\n        setInfo({\n            ...info,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const postDiary = () => {\n        if (window.confirm(\"일기를 작성하시겠습니까?\")) {\n            if (!!info.date && !!info.emotion && !!info.content) {\n                dispatch(create(info));\n                navigate(\"/\");\n            } else {\n                return alert(\"값들을 채워주세요\");\n            }\n        } else {\n            return;\n        }\n    };\n\n    return (\n        <div className=\"DiaryEditor\">\n            <MyHeader\n                headText={\"새 일기 쓰기\"}\n                leftChild={\n                    <MyButton\n                        onClick={() => {\n                            navigate(-1);\n                        }}\n                        text={\"뒤로 가기\"}\n                    />\n                }\n            />\n            <div>\n                <section>\n                    <h4>오늘은 언제인가요?</h4>\n                    <div className=\"input-box\">\n                        <input name=\"date\" className=\"input-date\" type=\"date\" onChange={onChange} />\n                    </div>\n                </section>\n                <section>\n                    <h4>오늘의 감정</h4>\n                    <div className=\"input_box emotion_list_wrapper\">\n                        {emotionList.map((it) => (\n                            <EmotionItem name=\"emotion\" key={it.emotion_id} {...it} handleClickEmote={handleClickEmote} isSelected={it.emotion_id === emotion} />\n                        ))}\n                    </div>\n                </section>\n                <section>\n                    <h4>오늘의 일기</h4>\n                    <div className=\"input_box text_wrapper\">\n                        <textarea name=\"content\" placeholder=\"오늘은 어땠나요\" onChange={onChange} />\n                    </div>\n                </section>\n                <section className=\"input_button\">\n                    <MyButton text={\"취소하기\"} />\n                    <MyButton onClick={postDiary} text={\"작성완료\"} type={\"positive\"} />\n                </section>\n            </div>\n        </div>\n    );\n};\n\nexport default DiaryEditor;\n",[],"/Users/jojuseon/emotion-diary/src/components/EmotionItem.js",["98"],[],"import React from \"react\";\n\nconst EmotionItem = ({ emotion_id, emotion_img, emotion_descript, handleClickEmote, isSelected }) => {\n    return (\n        <div onClick={() => handleClickEmote(emotion_id)} className={[\"EmotionItem\", isSelected ? `EmotionItem_on_${emotion_id}` : `EmotionItem_off`].join(\" \")}>\n            <img src={emotion_img} />\n            <span>{emotion_descript}</span>\n        </div>\n    );\n};\n\nexport default EmotionItem;\n",{"ruleId":"99","severity":1,"message":"100","line":7,"column":10,"nodeType":"101","messageId":"102","endLine":7,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":21,"column":17,"nodeType":"105","endLine":21,"endColumn":77},{"ruleId":"99","severity":1,"message":"106","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":27},{"ruleId":"99","severity":1,"message":"107","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"108","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":21},{"ruleId":"99","severity":1,"message":"109","line":3,"column":23,"nodeType":"101","messageId":"102","endLine":3,"endColumn":38},{"ruleId":"99","severity":1,"message":"110","line":3,"column":51,"nodeType":"101","messageId":"102","endLine":3,"endColumn":59},{"ruleId":"99","severity":1,"message":"107","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"104","line":21,"column":17,"nodeType":"105","endLine":21,"endColumn":89},{"ruleId":"99","severity":1,"message":"111","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":6,"column":13,"nodeType":"105","endLine":6,"endColumn":38},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","'useState' is defined but never used.","'useNavigate' is defined but never used.","'useSearchParams' is defined but never used.","'Navigate' is defined but never used.","'useEffect' is defined but never used."]