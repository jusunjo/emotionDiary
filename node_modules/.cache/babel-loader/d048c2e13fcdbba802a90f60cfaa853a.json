{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst write = createSlice({\n  name: \"write\",\n  initialState: {\n    writeList: [] // writeList: [\n    //     {id: 0, date: '2022-06-03', emotion: 5, content: '끔찍함'},\n    //     {id: 1, date: '2022-06-03', emotion: 5, content: '끔찍함'},\n    //     {id: 2, date: '2022-06-03', emotion: 5, content: '끔찍함'}\n    // ],\n\n  },\n  reducers: {\n    create: (state, action) => {\n      return { ...state,\n        writeList: state.writeList.concat({\n          unique: Math.floor(Math.random() * new Date()),\n          date: new Date(action.payload.date).getTime(),\n          content: action.payload.content,\n          emotion: action.payload.emotion\n        })\n      };\n    },\n    update: (state, action) => {\n      return { ...state,\n        writeList: [...state.writeList, state.writeList.forEach(it => {\n          if (it.unique == action.payload.unique) {\n            return console.log(\"it\", it);\n          } else {\n            return console.log(\"걍 없어요\");\n          }\n        })] //  state.writeList.forEach((it) => {\n        //     if (it.unique === action.payload.unique) {\n        //         return console.log(it);\n        //     }\n        // }),\n\n      }; ///{date: '2022-06-03', emotion: 5, content: '끔찍함'} 이렇게 생긴 객체가 온다.\n    },\n    remove: (state, action) => {\n      return { ...state,\n        writeList: state.writeList.filter(it => it.id !== action.payload)\n      };\n    }\n  }\n});\nexport const {\n  create,\n  remove,\n  update\n} = write.actions;\nexport default write.reducer;","map":{"version":3,"names":["createSlice","write","name","initialState","writeList","reducers","create","state","action","concat","unique","Math","floor","random","Date","date","payload","getTime","content","emotion","update","forEach","it","console","log","remove","filter","id","actions","reducer"],"sources":["/Users/jojuseon/emotion-diary/src/modules/write.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst write = createSlice({\n    name: \"write\",\n\n    initialState: {\n        writeList: [],\n        // writeList: [\n        //     {id: 0, date: '2022-06-03', emotion: 5, content: '끔찍함'},\n        //     {id: 1, date: '2022-06-03', emotion: 5, content: '끔찍함'},\n        //     {id: 2, date: '2022-06-03', emotion: 5, content: '끔찍함'}\n        // ],\n    },\n\n    reducers: {\n        create: (state, action) => {\n            return {\n                ...state,\n                writeList: state.writeList.concat({\n                    unique: Math.floor(Math.random() * new Date()),\n                    date: new Date(action.payload.date).getTime(),\n                    content: action.payload.content,\n                    emotion: action.payload.emotion,\n                }),\n            };\n        },\n        update: (state, action) => {\n            return {\n                ...state,\n                writeList: [\n                    ...state.writeList,\n                    state.writeList.forEach((it) => {\n                        if (it.unique == action.payload.unique) {\n                            return console.log(\"it\", it);\n                        } else {\n                            return console.log(\"걍 없어요\");\n                        }\n                    }),\n                ],\n\n                //  state.writeList.forEach((it) => {\n                //     if (it.unique === action.payload.unique) {\n                //         return console.log(it);\n                //     }\n                // }),\n            };\n            ///{date: '2022-06-03', emotion: 5, content: '끔찍함'} 이렇게 생긴 객체가 온다.\n        },\n\n        remove: (state, action) => {\n            return {\n                ...state,\n                writeList: state.writeList.filter((it) => it.id !== action.payload),\n            };\n        },\n    },\n});\n\nexport const { create, remove, update } = write.actions;\n\nexport default write.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACtBE,IAAI,EAAE,OADgB;EAGtBC,YAAY,EAAE;IACVC,SAAS,EAAE,EADD,CAEV;IACA;IACA;IACA;IACA;;EANU,CAHQ;EAYtBC,QAAQ,EAAE;IACNC,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACvB,OAAO,EACH,GAAGD,KADA;QAEHH,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBK,MAAhB,CAAuB;UAC9BC,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAAIC,IAAJ,EAA3B,CADsB;UAE9BC,IAAI,EAAE,IAAID,IAAJ,CAASN,MAAM,CAACQ,OAAP,CAAeD,IAAxB,EAA8BE,OAA9B,EAFwB;UAG9BC,OAAO,EAAEV,MAAM,CAACQ,OAAP,CAAeE,OAHM;UAI9BC,OAAO,EAAEX,MAAM,CAACQ,OAAP,CAAeG;QAJM,CAAvB;MAFR,CAAP;IASH,CAXK;IAYNC,MAAM,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;MACvB,OAAO,EACH,GAAGD,KADA;QAEHH,SAAS,EAAE,CACP,GAAGG,KAAK,CAACH,SADF,EAEPG,KAAK,CAACH,SAAN,CAAgBiB,OAAhB,CAAyBC,EAAD,IAAQ;UAC5B,IAAIA,EAAE,CAACZ,MAAH,IAAaF,MAAM,CAACQ,OAAP,CAAeN,MAAhC,EAAwC;YACpC,OAAOa,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,EAAlB,CAAP;UACH,CAFD,MAEO;YACH,OAAOC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAP;UACH;QACJ,CAND,CAFO,CAFR,CAaH;QACA;QACA;QACA;QACA;;MAjBG,CAAP,CADuB,CAoBvB;IACH,CAjCK;IAmCNC,MAAM,EAAE,CAAClB,KAAD,EAAQC,MAAR,KAAmB;MACvB,OAAO,EACH,GAAGD,KADA;QAEHH,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBsB,MAAhB,CAAwBJ,EAAD,IAAQA,EAAE,CAACK,EAAH,KAAUnB,MAAM,CAACQ,OAAhD;MAFR,CAAP;IAIH;EAxCK;AAZY,CAAD,CAAzB;AAwDA,OAAO,MAAM;EAAEV,MAAF;EAAUmB,MAAV;EAAkBL;AAAlB,IAA6BnB,KAAK,CAAC2B,OAAzC;AAEP,eAAe3B,KAAK,CAAC4B,OAArB"},"metadata":{},"sourceType":"module"}